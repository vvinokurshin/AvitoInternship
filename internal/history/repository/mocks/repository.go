// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/vvinokurshin/AvitoInternship/internal/models"
)

// MockRepositoryI is a mock of RepositoryI interface.
type MockRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryIMockRecorder
}

// MockRepositoryIMockRecorder is the mock recorder for MockRepositoryI.
type MockRepositoryIMockRecorder struct {
	mock *MockRepositoryI
}

// NewMockRepositoryI creates a new mock instance.
func NewMockRepositoryI(ctrl *gomock.Controller) *MockRepositoryI {
	mock := &MockRepositoryI{ctrl: ctrl}
	mock.recorder = &MockRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryI) EXPECT() *MockRepositoryIMockRecorder {
	return m.recorder
}

// GetRecordsByDate mocks base method.
func (m *MockRepositoryI) SelectRecordsByDate(year int, month time.Month) ([]models.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRecordsByDate", year, month)
	ret0, _ := ret[0].([]models.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordsByDate indicates an expected call of GetRecordsByDate.
func (mr *MockRepositoryIMockRecorder) GetRecordsByDate(year, month interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRecordsByDate", reflect.TypeOf((*MockRepositoryI)(nil).SelectRecordsByDate), year, month)
}
