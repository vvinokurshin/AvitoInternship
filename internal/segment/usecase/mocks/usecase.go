// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/vvinokurshin/AvitoInternship/internal/models"
)

// MockUseCaseI is a mock of UseCaseI interface.
type MockUseCaseI struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseIMockRecorder
}

// MockUseCaseIMockRecorder is the mock recorder for MockUseCaseI.
type MockUseCaseIMockRecorder struct {
	mock *MockUseCaseI
}

// NewMockUseCaseI creates a new mock instance.
func NewMockUseCaseI(ctrl *gomock.Controller) *MockUseCaseI {
	mock := &MockUseCaseI{ctrl: ctrl}
	mock.recorder = &MockUseCaseIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCaseI) EXPECT() *MockUseCaseIMockRecorder {
	return m.recorder
}

// CreateSegment mocks base method.
func (m *MockUseCaseI) CreateSegment(form models.FormSegment) (*models.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegment", form)
	ret0, _ := ret[0].(*models.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSegment indicates an expected call of CreateSegment.
func (mr *MockUseCaseIMockRecorder) CreateSegment(form interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegment", reflect.TypeOf((*MockUseCaseI)(nil).CreateSegment), form)
}

// DeleteSegment mocks base method.
func (m *MockUseCaseI) DeleteSegment(slug string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegment", slug)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegment indicates an expected call of DeleteSegment.
func (mr *MockUseCaseIMockRecorder) DeleteSegment(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegment", reflect.TypeOf((*MockUseCaseI)(nil).DeleteSegment), slug)
}

// EditUserSegments mocks base method.
func (m *MockUseCaseI) EditUserSegments(userID uint64, segmentsToAdd []models.AddUserToSegment, segmentsToRemove []string) ([]models.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUserSegments", userID, segmentsToAdd, segmentsToRemove)
	ret0, _ := ret[0].([]models.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditUserSegments indicates an expected call of EditUserSegments.
func (mr *MockUseCaseIMockRecorder) EditUserSegments(userID, segmentsToAdd, segmentsToRemove interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUserSegments", reflect.TypeOf((*MockUseCaseI)(nil).EditUserSegments), userID, segmentsToAdd, segmentsToRemove)
}

// GetSegmentBySlug mocks base method.
func (m *MockUseCaseI) GetSegmentBySlug(slug string) (*models.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentBySlug", slug)
	ret0, _ := ret[0].(*models.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegmentBySlug indicates an expected call of GetSegmentBySlug.
func (mr *MockUseCaseIMockRecorder) GetSegmentBySlug(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentBySlug", reflect.TypeOf((*MockUseCaseI)(nil).GetSegmentBySlug), slug)
}

// GetUserSegments mocks base method.
func (m *MockUseCaseI) GetUserSegments(userID uint64) ([]models.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSegments", userID)
	ret0, _ := ret[0].([]models.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSegments indicates an expected call of GetUserSegments.
func (mr *MockUseCaseIMockRecorder) GetUserSegments(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSegments", reflect.TypeOf((*MockUseCaseI)(nil).GetUserSegments), userID)
}
