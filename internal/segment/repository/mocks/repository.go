// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/vvinokurshin/AvitoInternship/internal/models"
)

// MockRepositoryI is a mock of RepositoryI interface.
type MockRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryIMockRecorder
}

// MockRepositoryIMockRecorder is the mock recorder for MockRepositoryI.
type MockRepositoryIMockRecorder struct {
	mock *MockRepositoryI
}

// NewMockRepositoryI creates a new mock instance.
func NewMockRepositoryI(ctrl *gomock.Controller) *MockRepositoryI {
	mock := &MockRepositoryI{ctrl: ctrl}
	mock.recorder = &MockRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryI) EXPECT() *MockRepositoryIMockRecorder {
	return m.recorder
}

// DeleteSegment mocks base method.
func (m *MockRepositoryI) DeleteSegment(slug string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegment", slug)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegment indicates an expected call of DeleteSegment.
func (mr *MockRepositoryIMockRecorder) DeleteSegment(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegment", reflect.TypeOf((*MockRepositoryI)(nil).DeleteSegment), slug)
}

// DeleteSegmentsFromUser mocks base method.
func (m *MockRepositoryI) DeleteSegmentsFromUser(userID uint64, segmentIDs []uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegmentsFromUser", userID, segmentIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegmentsFromUser indicates an expected call of DeleteSegmentsFromUser.
func (mr *MockRepositoryIMockRecorder) DeleteSegmentsFromUser(userID, segmentIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegmentsFromUser", reflect.TypeOf((*MockRepositoryI)(nil).DeleteSegmentsFromUser), userID, segmentIDs)
}

// InsertSegment mocks base method.
func (m *MockRepositoryI) InsertSegment(segment *models.Segment) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSegment", segment)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertSegment indicates an expected call of InsertSegment.
func (mr *MockRepositoryIMockRecorder) InsertSegment(segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSegment", reflect.TypeOf((*MockRepositoryI)(nil).InsertSegment), segment)
}

// InsertSegmentsToUser mocks base method.
func (m *MockRepositoryI) InsertSegmentsToUser(userID uint64, segments []models.AddUserToSegment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSegmentsToUser", userID, segments)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSegmentsToUser indicates an expected call of InsertSegmentsToUser.
func (mr *MockRepositoryIMockRecorder) InsertSegmentsToUser(userID, segments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSegmentsToUser", reflect.TypeOf((*MockRepositoryI)(nil).InsertSegmentsToUser), userID, segments)
}

// InsertUsersToSegment mocks base method.
func (m *MockRepositoryI) InsertUsersToSegment(segmentID uint64, userIDs []uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUsersToSegment", segmentID, userIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUsersToSegment indicates an expected call of InsertUsersToSegment.
func (mr *MockRepositoryIMockRecorder) InsertUsersToSegment(segmentID, userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUsersToSegment", reflect.TypeOf((*MockRepositoryI)(nil).InsertUsersToSegment), segmentID, userIDs)
}

// SelectSegmentByID mocks base method.
func (m *MockRepositoryI) SelectSegmentByID(segmentID uint64) (*models.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectSegmentByID", segmentID)
	ret0, _ := ret[0].(*models.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectSegmentByID indicates an expected call of SelectSegmentByID.
func (mr *MockRepositoryIMockRecorder) SelectSegmentByID(segmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectSegmentByID", reflect.TypeOf((*MockRepositoryI)(nil).SelectSegmentByID), segmentID)
}

// SelectSegmentBySlug mocks base method.
func (m *MockRepositoryI) SelectSegmentBySlug(slug string) (*models.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectSegmentBySlug", slug)
	ret0, _ := ret[0].(*models.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectSegmentBySlug indicates an expected call of SelectSegmentBySlug.
func (mr *MockRepositoryIMockRecorder) SelectSegmentBySlug(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectSegmentBySlug", reflect.TypeOf((*MockRepositoryI)(nil).SelectSegmentBySlug), slug)
}

// SelectSegmentsByUser mocks base method.
func (m *MockRepositoryI) SelectSegmentsByUser(userID uint64) ([]models.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectSegmentsByUser", userID)
	ret0, _ := ret[0].([]models.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectSegmentsByUser indicates an expected call of SelectSegmentsByUser.
func (mr *MockRepositoryIMockRecorder) SelectSegmentsByUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectSegmentsByUser", reflect.TypeOf((*MockRepositoryI)(nil).SelectSegmentsByUser), userID)
}
